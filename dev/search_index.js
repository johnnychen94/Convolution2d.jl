var documenterSearchIndex = {"docs":
[{"location":"#Convolution2D-Documentation","page":"Convolution2D Documentation","title":"Convolution2D Documentation","text":"","category":"section"},{"location":"#Examples","page":"Convolution2D Documentation","title":"Examples","text":"","category":"section"},{"location":"","page":"Convolution2D Documentation","title":"Convolution2D Documentation","text":"using Convolution2D\nusing Images, TestImages\n\ncamera = imresize(testimage(\"cameraman\"), 255, 255)\nkern = [0 1 0\n\t\t1 -4 1\n\t\t0 1 0]\n\nX = float.(camera)\nconv2D(X, kern)\nimfilter(X, kern)","category":"page"},{"location":"#Function-references","page":"Convolution2D Documentation","title":"Function references","text":"","category":"section"},{"location":"","page":"Convolution2D Documentation","title":"Convolution2D Documentation","text":"conv2D","category":"page"},{"location":"#Convolution2D.conv2D","page":"Convolution2D Documentation","title":"Convolution2D.conv2D","text":"conv2D(X, kern)\n\nApply 2D convolution kernel kern on array X.\n\nArguments\n\nX::AbstractArray: must be odd size.\nkern::AbstractArray: usually small array, must be odd size.\n\nExamples\n\njulia> X = rand(1:5, 5, 5)\n5×5 Matrix{Int64}:\n 3  5  2  3  5\n 1  3  2  1  4\n 5  1  4  5  2\n 2  4  3  4  1\n 3  2  5  2  5\n\njulia> kern = [0 1 0; 1 -4 1; 0 1 0]\n3×3 Matrix{Int64}:\n 0   1  0\n 1  -4  1\n 0   1  0\n\njulia> conv2D(X, kern)\n5×5 Matrix{Int64}:\n  -6  -12    2  -4  -13\n   7   -3    2  10   -8\n -16   12   -5  -9    2\n   4   -8    5  -5    7\n  -8    4  -13   6  -17\n\n\n\n\n\n","category":"function"}]
}
